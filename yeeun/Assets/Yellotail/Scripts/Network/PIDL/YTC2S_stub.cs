




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

using System;
using System.Net;	     

namespace YTC2S
{
	internal class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

		public delegate bool RequestSignUpDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String id, System.String password);  
		public RequestSignUpDelegate RequestSignUp = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String id, System.String password)
		{ 
			return false;
		};
		public delegate bool RequestSignInDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String id, System.String password);  
		public RequestSignInDelegate RequestSignIn = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String id, System.String password)
		{ 
			return false;
		};
		public delegate bool RequestNicknameUsableDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String nickname);  
		public RequestNicknameUsableDelegate RequestNicknameUsable = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String nickname)
		{ 
			return false;
		};
		public delegate bool RequestRoomCreateDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String roomName);  
		public RequestRoomCreateDelegate RequestRoomCreate = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String roomName)
		{ 
			return false;
		};
		public delegate bool RequestRoomJoinDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int roomNumber);  
		public RequestRoomJoinDelegate RequestRoomJoin = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int roomNumber)
		{ 
			return false;
		};
		public delegate bool RequestRoomLeaveDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int roomNumber);  
		public RequestRoomLeaveDelegate RequestRoomLeave = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int roomNumber)
		{ 
			return false;
		};
		public delegate bool RequestRoomListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public RequestRoomListDelegate RequestRoomList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool RequestRoomUserListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int roomNumber);  
		public RequestRoomUserListDelegate RequestRoomUserList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int roomNumber)
		{ 
			return false;
		};
		public delegate bool SystemChatDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String message);  
		public SystemChatDelegate SystemChat = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String message)
		{ 
			return false;
		};
	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
					
		switch(__rmiID)
		{
        case Common.RequestSignUp:
            ProcessReceivedMessage_RequestSignUp(__msg, pa, hostTag, remote);
            break;
        case Common.RequestSignIn:
            ProcessReceivedMessage_RequestSignIn(__msg, pa, hostTag, remote);
            break;
        case Common.RequestNicknameUsable:
            ProcessReceivedMessage_RequestNicknameUsable(__msg, pa, hostTag, remote);
            break;
        case Common.RequestRoomCreate:
            ProcessReceivedMessage_RequestRoomCreate(__msg, pa, hostTag, remote);
            break;
        case Common.RequestRoomJoin:
            ProcessReceivedMessage_RequestRoomJoin(__msg, pa, hostTag, remote);
            break;
        case Common.RequestRoomLeave:
            ProcessReceivedMessage_RequestRoomLeave(__msg, pa, hostTag, remote);
            break;
        case Common.RequestRoomList:
            ProcessReceivedMessage_RequestRoomList(__msg, pa, hostTag, remote);
            break;
        case Common.RequestRoomUserList:
            ProcessReceivedMessage_RequestRoomUserList(__msg, pa, hostTag, remote);
            break;
        case Common.SystemChat:
            ProcessReceivedMessage_SystemChat(__msg, pa, hostTag, remote);
            break;
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
    void ProcessReceivedMessage_RequestSignUp(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.String id; Yellotail.NettentionMarshaler.Read(__msg,out id);	
System.String password; Yellotail.NettentionMarshaler.Read(__msg,out password);	
core.PostCheckReadMessage(__msg, RmiName_RequestSignUp);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=id.ToString()+",";
parameterString+=password.ToString()+",";
        NotifyCallFromStub(Common.RequestSignUp, RmiName_RequestSignUp,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestSignUp;
        summary.rmiName = RmiName_RequestSignUp;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestSignUp (remote,ctx , id, password );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestSignUp);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestSignUp;
        summary.rmiName = RmiName_RequestSignUp;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RequestSignIn(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.String id; Yellotail.NettentionMarshaler.Read(__msg,out id);	
System.String password; Yellotail.NettentionMarshaler.Read(__msg,out password);	
core.PostCheckReadMessage(__msg, RmiName_RequestSignIn);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=id.ToString()+",";
parameterString+=password.ToString()+",";
        NotifyCallFromStub(Common.RequestSignIn, RmiName_RequestSignIn,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestSignIn;
        summary.rmiName = RmiName_RequestSignIn;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestSignIn (remote,ctx , id, password );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestSignIn);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestSignIn;
        summary.rmiName = RmiName_RequestSignIn;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RequestNicknameUsable(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.String nickname; Yellotail.NettentionMarshaler.Read(__msg,out nickname);	
core.PostCheckReadMessage(__msg, RmiName_RequestNicknameUsable);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=nickname.ToString()+",";
        NotifyCallFromStub(Common.RequestNicknameUsable, RmiName_RequestNicknameUsable,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestNicknameUsable;
        summary.rmiName = RmiName_RequestNicknameUsable;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestNicknameUsable (remote,ctx , nickname );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestNicknameUsable);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestNicknameUsable;
        summary.rmiName = RmiName_RequestNicknameUsable;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RequestRoomCreate(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.String roomName; Yellotail.NettentionMarshaler.Read(__msg,out roomName);	
core.PostCheckReadMessage(__msg, RmiName_RequestRoomCreate);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=roomName.ToString()+",";
        NotifyCallFromStub(Common.RequestRoomCreate, RmiName_RequestRoomCreate,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestRoomCreate;
        summary.rmiName = RmiName_RequestRoomCreate;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestRoomCreate (remote,ctx , roomName );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestRoomCreate);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestRoomCreate;
        summary.rmiName = RmiName_RequestRoomCreate;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RequestRoomJoin(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int roomNumber; Yellotail.NettentionMarshaler.Read(__msg,out roomNumber);	
core.PostCheckReadMessage(__msg, RmiName_RequestRoomJoin);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=roomNumber.ToString()+",";
        NotifyCallFromStub(Common.RequestRoomJoin, RmiName_RequestRoomJoin,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestRoomJoin;
        summary.rmiName = RmiName_RequestRoomJoin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestRoomJoin (remote,ctx , roomNumber );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestRoomJoin);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestRoomJoin;
        summary.rmiName = RmiName_RequestRoomJoin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RequestRoomLeave(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int roomNumber; Yellotail.NettentionMarshaler.Read(__msg,out roomNumber);	
core.PostCheckReadMessage(__msg, RmiName_RequestRoomLeave);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=roomNumber.ToString()+",";
        NotifyCallFromStub(Common.RequestRoomLeave, RmiName_RequestRoomLeave,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestRoomLeave;
        summary.rmiName = RmiName_RequestRoomLeave;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestRoomLeave (remote,ctx , roomNumber );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestRoomLeave);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestRoomLeave;
        summary.rmiName = RmiName_RequestRoomLeave;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RequestRoomList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_RequestRoomList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.RequestRoomList, RmiName_RequestRoomList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestRoomList;
        summary.rmiName = RmiName_RequestRoomList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestRoomList (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestRoomList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestRoomList;
        summary.rmiName = RmiName_RequestRoomList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RequestRoomUserList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int roomNumber; Yellotail.NettentionMarshaler.Read(__msg,out roomNumber);	
core.PostCheckReadMessage(__msg, RmiName_RequestRoomUserList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=roomNumber.ToString()+",";
        NotifyCallFromStub(Common.RequestRoomUserList, RmiName_RequestRoomUserList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestRoomUserList;
        summary.rmiName = RmiName_RequestRoomUserList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestRoomUserList (remote,ctx , roomNumber );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestRoomUserList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestRoomUserList;
        summary.rmiName = RmiName_RequestRoomUserList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_SystemChat(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.String message; Yellotail.NettentionMarshaler.Read(__msg,out message);	
core.PostCheckReadMessage(__msg, RmiName_SystemChat);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=message.ToString()+",";
        NotifyCallFromStub(Common.SystemChat, RmiName_SystemChat,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.SystemChat;
        summary.rmiName = RmiName_SystemChat;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =SystemChat (remote,ctx , message );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_SystemChat);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.SystemChat;
        summary.rmiName = RmiName_SystemChat;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
		#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_RequestSignUp="RequestSignUp";
public const string RmiName_RequestSignIn="RequestSignIn";
public const string RmiName_RequestNicknameUsable="RequestNicknameUsable";
public const string RmiName_RequestRoomCreate="RequestRoomCreate";
public const string RmiName_RequestRoomJoin="RequestRoomJoin";
public const string RmiName_RequestRoomLeave="RequestRoomLeave";
public const string RmiName_RequestRoomList="RequestRoomList";
public const string RmiName_RequestRoomUserList="RequestRoomUserList";
public const string RmiName_SystemChat="SystemChat";
       
public const string RmiName_First = RmiName_RequestSignUp;
		#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_RequestSignUp="";
public const string RmiName_RequestSignIn="";
public const string RmiName_RequestNicknameUsable="";
public const string RmiName_RequestRoomCreate="";
public const string RmiName_RequestRoomJoin="";
public const string RmiName_RequestRoomLeave="";
public const string RmiName_RequestRoomList="";
public const string RmiName_RequestRoomUserList="";
public const string RmiName_SystemChat="";
       
public const string RmiName_First = "";
		#endif

		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}

