




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

using System;
using System.Net;

namespace UserProtocol
{
	internal class Proxy:Nettention.Proud.RmiProxy
	{
public bool RequestSignin(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String id, System.String password)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.RequestSignin;
		__msg.Write(__msgid);
		Yellotail.NettentionMarshaler.Write(__msg, id);
		Yellotail.NettentionMarshaler.Write(__msg, password);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_RequestSignin, Common.RequestSignin);
}

public bool RequestSignin(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, System.String id, System.String password)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.RequestSignin;
__msg.Write(__msgid);
Yellotail.NettentionMarshaler.Write(__msg, id);
Yellotail.NettentionMarshaler.Write(__msg, password);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_RequestSignin, Common.RequestSignin);
}
public bool NotifySigninSuccess(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.NotifySigninSuccess;
		__msg.Write(__msgid);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_NotifySigninSuccess, Common.NotifySigninSuccess);
}

public bool NotifySigninSuccess(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.NotifySigninSuccess;
__msg.Write(__msgid);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_NotifySigninSuccess, Common.NotifySigninSuccess);
}
public bool NotifySigninFailed(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String reason)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.NotifySigninFailed;
		__msg.Write(__msgid);
		Yellotail.NettentionMarshaler.Write(__msg, reason);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_NotifySigninFailed, Common.NotifySigninFailed);
}

public bool NotifySigninFailed(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, System.String reason)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.NotifySigninFailed;
__msg.Write(__msgid);
Yellotail.NettentionMarshaler.Write(__msg, reason);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_NotifySigninFailed, Common.NotifySigninFailed);
}
public bool RequestLogin(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String id, System.String password)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.RequestLogin;
		__msg.Write(__msgid);
		Yellotail.NettentionMarshaler.Write(__msg, id);
		Yellotail.NettentionMarshaler.Write(__msg, password);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_RequestLogin, Common.RequestLogin);
}

public bool RequestLogin(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, System.String id, System.String password)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.RequestLogin;
__msg.Write(__msgid);
Yellotail.NettentionMarshaler.Write(__msg, id);
Yellotail.NettentionMarshaler.Write(__msg, password);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_RequestLogin, Common.RequestLogin);
}
public bool NotifyLoginSuccess(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.NotifyLoginSuccess;
		__msg.Write(__msgid);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_NotifyLoginSuccess, Common.NotifyLoginSuccess);
}

public bool NotifyLoginSuccess(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.NotifyLoginSuccess;
__msg.Write(__msgid);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_NotifyLoginSuccess, Common.NotifyLoginSuccess);
}
public bool NotifyLoginFailed(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String reason)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.NotifyLoginFailed;
		__msg.Write(__msgid);
		Yellotail.NettentionMarshaler.Write(__msg, reason);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_NotifyLoginFailed, Common.NotifyLoginFailed);
}

public bool NotifyLoginFailed(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, System.String reason)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.NotifyLoginFailed;
__msg.Write(__msgid);
Yellotail.NettentionMarshaler.Write(__msg, reason);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_NotifyLoginFailed, Common.NotifyLoginFailed);
}
public bool ResponseLogin(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int result)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ResponseLogin;
		__msg.Write(__msgid);
		Yellotail.NettentionMarshaler.Write(__msg, result);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ResponseLogin, Common.ResponseLogin);
}

public bool ResponseLogin(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, int result)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ResponseLogin;
__msg.Write(__msgid);
Yellotail.NettentionMarshaler.Write(__msg, result);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ResponseLogin, Common.ResponseLogin);
}
	
		#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_RequestSignin="RequestSignin";
public const string RmiName_NotifySigninSuccess="NotifySigninSuccess";
public const string RmiName_NotifySigninFailed="NotifySigninFailed";
public const string RmiName_RequestLogin="RequestLogin";
public const string RmiName_NotifyLoginSuccess="NotifyLoginSuccess";
public const string RmiName_NotifyLoginFailed="NotifyLoginFailed";
public const string RmiName_ResponseLogin="ResponseLogin";
       
public const string RmiName_First = RmiName_RequestSignin;
		#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_RequestSignin="";
public const string RmiName_NotifySigninSuccess="";
public const string RmiName_NotifySigninFailed="";
public const string RmiName_RequestLogin="";
public const string RmiName_NotifyLoginSuccess="";
public const string RmiName_NotifyLoginFailed="";
public const string RmiName_ResponseLogin="";
       
public const string RmiName_First = "";
		#endif

		public override Nettention.Proud.RmiID[] GetRmiIDList() { return Common.RmiIDList; } 
	}
}
namespace RoomProtocol
{
	internal class Proxy:Nettention.Proud.RmiProxy
	{
public bool RequestRoomCreate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String roomName)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.RequestRoomCreate;
		__msg.Write(__msgid);
		Yellotail.NettentionMarshaler.Write(__msg, roomName);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_RequestRoomCreate, Common.RequestRoomCreate);
}

public bool RequestRoomCreate(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, System.String roomName)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.RequestRoomCreate;
__msg.Write(__msgid);
Yellotail.NettentionMarshaler.Write(__msg, roomName);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_RequestRoomCreate, Common.RequestRoomCreate);
}
public bool NotifyRoomCreateSuccess(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int roomNumber)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.NotifyRoomCreateSuccess;
		__msg.Write(__msgid);
		Yellotail.NettentionMarshaler.Write(__msg, roomNumber);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_NotifyRoomCreateSuccess, Common.NotifyRoomCreateSuccess);
}

public bool NotifyRoomCreateSuccess(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, int roomNumber)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.NotifyRoomCreateSuccess;
__msg.Write(__msgid);
Yellotail.NettentionMarshaler.Write(__msg, roomNumber);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_NotifyRoomCreateSuccess, Common.NotifyRoomCreateSuccess);
}
public bool NotifyRoomCreateFailed(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String reason)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.NotifyRoomCreateFailed;
		__msg.Write(__msgid);
		Yellotail.NettentionMarshaler.Write(__msg, reason);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_NotifyRoomCreateFailed, Common.NotifyRoomCreateFailed);
}

public bool NotifyRoomCreateFailed(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, System.String reason)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.NotifyRoomCreateFailed;
__msg.Write(__msgid);
Yellotail.NettentionMarshaler.Write(__msg, reason);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_NotifyRoomCreateFailed, Common.NotifyRoomCreateFailed);
}
public bool RequestRoomList(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.RequestRoomList;
		__msg.Write(__msgid);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_RequestRoomList, Common.RequestRoomList);
}

public bool RequestRoomList(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.RequestRoomList;
__msg.Write(__msgid);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_RequestRoomList, Common.RequestRoomList);
}
public bool ResponseRoomList(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.Collections.Generic.List<Yellotail.Common.RoomInfo> roomList)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ResponseRoomList;
		__msg.Write(__msgid);
		Yellotail.NettentionMarshaler.Write(__msg, roomList);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ResponseRoomList, Common.ResponseRoomList);
}

public bool ResponseRoomList(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, System.Collections.Generic.List<Yellotail.Common.RoomInfo> roomList)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ResponseRoomList;
__msg.Write(__msgid);
Yellotail.NettentionMarshaler.Write(__msg, roomList);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ResponseRoomList, Common.ResponseRoomList);
}
public bool RequestRoomUserList(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int roomNumber)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.RequestRoomUserList;
		__msg.Write(__msgid);
		Yellotail.NettentionMarshaler.Write(__msg, roomNumber);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_RequestRoomUserList, Common.RequestRoomUserList);
}

public bool RequestRoomUserList(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, int roomNumber)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.RequestRoomUserList;
__msg.Write(__msgid);
Yellotail.NettentionMarshaler.Write(__msg, roomNumber);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_RequestRoomUserList, Common.RequestRoomUserList);
}
public bool ResponseRoomUserList(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.Collections.Generic.List<Yellotail.Common.UserInfo> roomUserList)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ResponseRoomUserList;
		__msg.Write(__msgid);
		Yellotail.NettentionMarshaler.Write(__msg, roomUserList);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ResponseRoomUserList, Common.ResponseRoomUserList);
}

public bool ResponseRoomUserList(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, System.Collections.Generic.List<Yellotail.Common.UserInfo> roomUserList)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ResponseRoomUserList;
__msg.Write(__msgid);
Yellotail.NettentionMarshaler.Write(__msg, roomUserList);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ResponseRoomUserList, Common.ResponseRoomUserList);
}
public bool RequestRoomJoin(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int roomNumber)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.RequestRoomJoin;
		__msg.Write(__msgid);
		Yellotail.NettentionMarshaler.Write(__msg, roomNumber);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_RequestRoomJoin, Common.RequestRoomJoin);
}

public bool RequestRoomJoin(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, int roomNumber)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.RequestRoomJoin;
__msg.Write(__msgid);
Yellotail.NettentionMarshaler.Write(__msg, roomNumber);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_RequestRoomJoin, Common.RequestRoomJoin);
}
public bool NotifyRoomJoinSuccess(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int roomNumber)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.NotifyRoomJoinSuccess;
		__msg.Write(__msgid);
		Yellotail.NettentionMarshaler.Write(__msg, roomNumber);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_NotifyRoomJoinSuccess, Common.NotifyRoomJoinSuccess);
}

public bool NotifyRoomJoinSuccess(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, int roomNumber)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.NotifyRoomJoinSuccess;
__msg.Write(__msgid);
Yellotail.NettentionMarshaler.Write(__msg, roomNumber);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_NotifyRoomJoinSuccess, Common.NotifyRoomJoinSuccess);
}
public bool NotifyRoomJoinFailed(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String reason)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.NotifyRoomJoinFailed;
		__msg.Write(__msgid);
		Yellotail.NettentionMarshaler.Write(__msg, reason);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_NotifyRoomJoinFailed, Common.NotifyRoomJoinFailed);
}

public bool NotifyRoomJoinFailed(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, System.String reason)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.NotifyRoomJoinFailed;
__msg.Write(__msgid);
Yellotail.NettentionMarshaler.Write(__msg, reason);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_NotifyRoomJoinFailed, Common.NotifyRoomJoinFailed);
}
public bool RequestRoomLeave(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int roomNumber)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.RequestRoomLeave;
		__msg.Write(__msgid);
		Yellotail.NettentionMarshaler.Write(__msg, roomNumber);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_RequestRoomLeave, Common.RequestRoomLeave);
}

public bool RequestRoomLeave(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, int roomNumber)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.RequestRoomLeave;
__msg.Write(__msgid);
Yellotail.NettentionMarshaler.Write(__msg, roomNumber);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_RequestRoomLeave, Common.RequestRoomLeave);
}
public bool NotifyRoomLeaveSuccess(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int roomNumber)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.NotifyRoomLeaveSuccess;
		__msg.Write(__msgid);
		Yellotail.NettentionMarshaler.Write(__msg, roomNumber);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_NotifyRoomLeaveSuccess, Common.NotifyRoomLeaveSuccess);
}

public bool NotifyRoomLeaveSuccess(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, int roomNumber)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.NotifyRoomLeaveSuccess;
__msg.Write(__msgid);
Yellotail.NettentionMarshaler.Write(__msg, roomNumber);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_NotifyRoomLeaveSuccess, Common.NotifyRoomLeaveSuccess);
}
public bool NotifyRoomLeaveFailed(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String reason)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.NotifyRoomLeaveFailed;
		__msg.Write(__msgid);
		Yellotail.NettentionMarshaler.Write(__msg, reason);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_NotifyRoomLeaveFailed, Common.NotifyRoomLeaveFailed);
}

public bool NotifyRoomLeaveFailed(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, System.String reason)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.NotifyRoomLeaveFailed;
__msg.Write(__msgid);
Yellotail.NettentionMarshaler.Write(__msg, reason);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_NotifyRoomLeaveFailed, Common.NotifyRoomLeaveFailed);
}
	
		#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_RequestRoomCreate="RequestRoomCreate";
public const string RmiName_NotifyRoomCreateSuccess="NotifyRoomCreateSuccess";
public const string RmiName_NotifyRoomCreateFailed="NotifyRoomCreateFailed";
public const string RmiName_RequestRoomList="RequestRoomList";
public const string RmiName_ResponseRoomList="ResponseRoomList";
public const string RmiName_RequestRoomUserList="RequestRoomUserList";
public const string RmiName_ResponseRoomUserList="ResponseRoomUserList";
public const string RmiName_RequestRoomJoin="RequestRoomJoin";
public const string RmiName_NotifyRoomJoinSuccess="NotifyRoomJoinSuccess";
public const string RmiName_NotifyRoomJoinFailed="NotifyRoomJoinFailed";
public const string RmiName_RequestRoomLeave="RequestRoomLeave";
public const string RmiName_NotifyRoomLeaveSuccess="NotifyRoomLeaveSuccess";
public const string RmiName_NotifyRoomLeaveFailed="NotifyRoomLeaveFailed";
       
public const string RmiName_First = RmiName_RequestRoomCreate;
		#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_RequestRoomCreate="";
public const string RmiName_NotifyRoomCreateSuccess="";
public const string RmiName_NotifyRoomCreateFailed="";
public const string RmiName_RequestRoomList="";
public const string RmiName_ResponseRoomList="";
public const string RmiName_RequestRoomUserList="";
public const string RmiName_ResponseRoomUserList="";
public const string RmiName_RequestRoomJoin="";
public const string RmiName_NotifyRoomJoinSuccess="";
public const string RmiName_NotifyRoomJoinFailed="";
public const string RmiName_RequestRoomLeave="";
public const string RmiName_NotifyRoomLeaveSuccess="";
public const string RmiName_NotifyRoomLeaveFailed="";
       
public const string RmiName_First = "";
		#endif

		public override Nettention.Proud.RmiID[] GetRmiIDList() { return Common.RmiIDList; } 
	}
}
namespace ChatProtocol
{
	internal class Proxy:Nettention.Proud.RmiProxy
	{
public bool P2PChat(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String userName, System.String message)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.P2PChat;
		__msg.Write(__msgid);
		Yellotail.NettentionMarshaler.Write(__msg, userName);
		Yellotail.NettentionMarshaler.Write(__msg, message);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_P2PChat, Common.P2PChat);
}

public bool P2PChat(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, System.String userName, System.String message)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.P2PChat;
__msg.Write(__msgid);
Yellotail.NettentionMarshaler.Write(__msg, userName);
Yellotail.NettentionMarshaler.Write(__msg, message);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_P2PChat, Common.P2PChat);
}
public bool SystemChat(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String message)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.SystemChat;
		__msg.Write(__msgid);
		Yellotail.NettentionMarshaler.Write(__msg, message);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_SystemChat, Common.SystemChat);
}

public bool SystemChat(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, System.String message)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.SystemChat;
__msg.Write(__msgid);
Yellotail.NettentionMarshaler.Write(__msg, message);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_SystemChat, Common.SystemChat);
}
	
		#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_P2PChat="P2PChat";
public const string RmiName_SystemChat="SystemChat";
       
public const string RmiName_First = RmiName_P2PChat;
		#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_P2PChat="";
public const string RmiName_SystemChat="";
       
public const string RmiName_First = "";
		#endif

		public override Nettention.Proud.RmiID[] GetRmiIDList() { return Common.RmiIDList; } 
	}
}
namespace ItemProtocol
{
	internal class Proxy:Nettention.Proud.RmiProxy
	{
public bool RequestItemAdd(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int itemId)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.RequestItemAdd;
		__msg.Write(__msgid);
		Yellotail.NettentionMarshaler.Write(__msg, itemId);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_RequestItemAdd, Common.RequestItemAdd);
}

public bool RequestItemAdd(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, int itemId)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.RequestItemAdd;
__msg.Write(__msgid);
Yellotail.NettentionMarshaler.Write(__msg, itemId);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_RequestItemAdd, Common.RequestItemAdd);
}
public bool NotifyItemAddSuccess(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int itemId)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.NotifyItemAddSuccess;
		__msg.Write(__msgid);
		Yellotail.NettentionMarshaler.Write(__msg, itemId);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_NotifyItemAddSuccess, Common.NotifyItemAddSuccess);
}

public bool NotifyItemAddSuccess(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, int itemId)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.NotifyItemAddSuccess;
__msg.Write(__msgid);
Yellotail.NettentionMarshaler.Write(__msg, itemId);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_NotifyItemAddSuccess, Common.NotifyItemAddSuccess);
}
public bool NotifyItemAddFailed(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String reason)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.NotifyItemAddFailed;
		__msg.Write(__msgid);
		Yellotail.NettentionMarshaler.Write(__msg, reason);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_NotifyItemAddFailed, Common.NotifyItemAddFailed);
}

public bool NotifyItemAddFailed(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, System.String reason)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.NotifyItemAddFailed;
__msg.Write(__msgid);
Yellotail.NettentionMarshaler.Write(__msg, reason);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_NotifyItemAddFailed, Common.NotifyItemAddFailed);
}
public bool RequestItemList(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.RequestItemList;
		__msg.Write(__msgid);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_RequestItemList, Common.RequestItemList);
}

public bool RequestItemList(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.RequestItemList;
__msg.Write(__msgid);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_RequestItemList, Common.RequestItemList);
}
public bool ResponseItemList(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.Collections.Generic.List<Yellotail.Common.ItemInfo> itemList)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ResponseItemList;
		__msg.Write(__msgid);
		Yellotail.NettentionMarshaler.Write(__msg, itemList);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ResponseItemList, Common.ResponseItemList);
}

public bool ResponseItemList(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, System.Collections.Generic.List<Yellotail.Common.ItemInfo> itemList)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ResponseItemList;
__msg.Write(__msgid);
Yellotail.NettentionMarshaler.Write(__msg, itemList);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ResponseItemList, Common.ResponseItemList);
}
	
		#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_RequestItemAdd="RequestItemAdd";
public const string RmiName_NotifyItemAddSuccess="NotifyItemAddSuccess";
public const string RmiName_NotifyItemAddFailed="NotifyItemAddFailed";
public const string RmiName_RequestItemList="RequestItemList";
public const string RmiName_ResponseItemList="ResponseItemList";
       
public const string RmiName_First = RmiName_RequestItemAdd;
		#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_RequestItemAdd="";
public const string RmiName_NotifyItemAddSuccess="";
public const string RmiName_NotifyItemAddFailed="";
public const string RmiName_RequestItemList="";
public const string RmiName_ResponseItemList="";
       
public const string RmiName_First = "";
		#endif

		public override Nettention.Proud.RmiID[] GetRmiIDList() { return Common.RmiIDList; } 
	}
}

