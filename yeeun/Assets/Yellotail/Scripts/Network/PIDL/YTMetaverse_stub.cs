




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

using System;
using System.Net;	     

namespace UserProtocol
{
	internal class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

		public delegate bool RequestSigninDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String id, System.String password);  
		public RequestSigninDelegate RequestSignin = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String id, System.String password)
		{ 
			return false;
		};
		public delegate bool NotifySigninSuccessDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public NotifySigninSuccessDelegate NotifySigninSuccess = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool NotifySigninFailedDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String reason);  
		public NotifySigninFailedDelegate NotifySigninFailed = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String reason)
		{ 
			return false;
		};
		public delegate bool RequestLoginDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String id, System.String password);  
		public RequestLoginDelegate RequestLogin = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String id, System.String password)
		{ 
			return false;
		};
		public delegate bool NotifyLoginSuccessDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public NotifyLoginSuccessDelegate NotifyLoginSuccess = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool NotifyLoginFailedDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String reason);  
		public NotifyLoginFailedDelegate NotifyLoginFailed = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String reason)
		{ 
			return false;
		};
		public delegate bool ResponseLoginDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int result);  
		public ResponseLoginDelegate ResponseLogin = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int result)
		{ 
			return false;
		};
	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
					
		switch(__rmiID)
		{
        case Common.RequestSignin:
            ProcessReceivedMessage_RequestSignin(__msg, pa, hostTag, remote);
            break;
        case Common.NotifySigninSuccess:
            ProcessReceivedMessage_NotifySigninSuccess(__msg, pa, hostTag, remote);
            break;
        case Common.NotifySigninFailed:
            ProcessReceivedMessage_NotifySigninFailed(__msg, pa, hostTag, remote);
            break;
        case Common.RequestLogin:
            ProcessReceivedMessage_RequestLogin(__msg, pa, hostTag, remote);
            break;
        case Common.NotifyLoginSuccess:
            ProcessReceivedMessage_NotifyLoginSuccess(__msg, pa, hostTag, remote);
            break;
        case Common.NotifyLoginFailed:
            ProcessReceivedMessage_NotifyLoginFailed(__msg, pa, hostTag, remote);
            break;
        case Common.ResponseLogin:
            ProcessReceivedMessage_ResponseLogin(__msg, pa, hostTag, remote);
            break;
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
    void ProcessReceivedMessage_RequestSignin(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.String id; Yellotail.NettentionMarshaler.Read(__msg,out id);	
System.String password; Yellotail.NettentionMarshaler.Read(__msg,out password);	
core.PostCheckReadMessage(__msg, RmiName_RequestSignin);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=id.ToString()+",";
parameterString+=password.ToString()+",";
        NotifyCallFromStub(Common.RequestSignin, RmiName_RequestSignin,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestSignin;
        summary.rmiName = RmiName_RequestSignin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestSignin (remote,ctx , id, password );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestSignin);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestSignin;
        summary.rmiName = RmiName_RequestSignin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotifySigninSuccess(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_NotifySigninSuccess);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.NotifySigninSuccess, RmiName_NotifySigninSuccess,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotifySigninSuccess;
        summary.rmiName = RmiName_NotifySigninSuccess;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotifySigninSuccess (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotifySigninSuccess);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotifySigninSuccess;
        summary.rmiName = RmiName_NotifySigninSuccess;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotifySigninFailed(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.String reason; Yellotail.NettentionMarshaler.Read(__msg,out reason);	
core.PostCheckReadMessage(__msg, RmiName_NotifySigninFailed);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=reason.ToString()+",";
        NotifyCallFromStub(Common.NotifySigninFailed, RmiName_NotifySigninFailed,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotifySigninFailed;
        summary.rmiName = RmiName_NotifySigninFailed;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotifySigninFailed (remote,ctx , reason );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotifySigninFailed);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotifySigninFailed;
        summary.rmiName = RmiName_NotifySigninFailed;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RequestLogin(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.String id; Yellotail.NettentionMarshaler.Read(__msg,out id);	
System.String password; Yellotail.NettentionMarshaler.Read(__msg,out password);	
core.PostCheckReadMessage(__msg, RmiName_RequestLogin);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=id.ToString()+",";
parameterString+=password.ToString()+",";
        NotifyCallFromStub(Common.RequestLogin, RmiName_RequestLogin,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestLogin;
        summary.rmiName = RmiName_RequestLogin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestLogin (remote,ctx , id, password );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestLogin);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestLogin;
        summary.rmiName = RmiName_RequestLogin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotifyLoginSuccess(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_NotifyLoginSuccess);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.NotifyLoginSuccess, RmiName_NotifyLoginSuccess,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotifyLoginSuccess;
        summary.rmiName = RmiName_NotifyLoginSuccess;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotifyLoginSuccess (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotifyLoginSuccess);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotifyLoginSuccess;
        summary.rmiName = RmiName_NotifyLoginSuccess;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotifyLoginFailed(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.String reason; Yellotail.NettentionMarshaler.Read(__msg,out reason);	
core.PostCheckReadMessage(__msg, RmiName_NotifyLoginFailed);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=reason.ToString()+",";
        NotifyCallFromStub(Common.NotifyLoginFailed, RmiName_NotifyLoginFailed,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotifyLoginFailed;
        summary.rmiName = RmiName_NotifyLoginFailed;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotifyLoginFailed (remote,ctx , reason );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotifyLoginFailed);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotifyLoginFailed;
        summary.rmiName = RmiName_NotifyLoginFailed;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ResponseLogin(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int result; Yellotail.NettentionMarshaler.Read(__msg,out result);	
core.PostCheckReadMessage(__msg, RmiName_ResponseLogin);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=result.ToString()+",";
        NotifyCallFromStub(Common.ResponseLogin, RmiName_ResponseLogin,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ResponseLogin;
        summary.rmiName = RmiName_ResponseLogin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ResponseLogin (remote,ctx , result );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ResponseLogin);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ResponseLogin;
        summary.rmiName = RmiName_ResponseLogin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
		#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_RequestSignin="RequestSignin";
public const string RmiName_NotifySigninSuccess="NotifySigninSuccess";
public const string RmiName_NotifySigninFailed="NotifySigninFailed";
public const string RmiName_RequestLogin="RequestLogin";
public const string RmiName_NotifyLoginSuccess="NotifyLoginSuccess";
public const string RmiName_NotifyLoginFailed="NotifyLoginFailed";
public const string RmiName_ResponseLogin="ResponseLogin";
       
public const string RmiName_First = RmiName_RequestSignin;
		#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_RequestSignin="";
public const string RmiName_NotifySigninSuccess="";
public const string RmiName_NotifySigninFailed="";
public const string RmiName_RequestLogin="";
public const string RmiName_NotifyLoginSuccess="";
public const string RmiName_NotifyLoginFailed="";
public const string RmiName_ResponseLogin="";
       
public const string RmiName_First = "";
		#endif

		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}
namespace RoomProtocol
{
	internal class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

		public delegate bool RequestRoomCreateDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String roomName);  
		public RequestRoomCreateDelegate RequestRoomCreate = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String roomName)
		{ 
			return false;
		};
		public delegate bool NotifyRoomCreateSuccessDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int roomNumber);  
		public NotifyRoomCreateSuccessDelegate NotifyRoomCreateSuccess = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int roomNumber)
		{ 
			return false;
		};
		public delegate bool NotifyRoomCreateFailedDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String reason);  
		public NotifyRoomCreateFailedDelegate NotifyRoomCreateFailed = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String reason)
		{ 
			return false;
		};
		public delegate bool RequestRoomListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public RequestRoomListDelegate RequestRoomList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool ResponseRoomListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.Collections.Generic.List<Yellotail.Common.RoomInfo> roomList);  
		public ResponseRoomListDelegate ResponseRoomList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.Collections.Generic.List<Yellotail.Common.RoomInfo> roomList)
		{ 
			return false;
		};
		public delegate bool RequestRoomUserListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int roomNumber);  
		public RequestRoomUserListDelegate RequestRoomUserList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int roomNumber)
		{ 
			return false;
		};
		public delegate bool ResponseRoomUserListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.Collections.Generic.List<Yellotail.Common.UserInfo> roomUserList);  
		public ResponseRoomUserListDelegate ResponseRoomUserList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.Collections.Generic.List<Yellotail.Common.UserInfo> roomUserList)
		{ 
			return false;
		};
		public delegate bool RequestRoomJoinDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int roomNumber);  
		public RequestRoomJoinDelegate RequestRoomJoin = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int roomNumber)
		{ 
			return false;
		};
		public delegate bool NotifyRoomJoinSuccessDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int roomNumber);  
		public NotifyRoomJoinSuccessDelegate NotifyRoomJoinSuccess = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int roomNumber)
		{ 
			return false;
		};
		public delegate bool NotifyRoomJoinFailedDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String reason);  
		public NotifyRoomJoinFailedDelegate NotifyRoomJoinFailed = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String reason)
		{ 
			return false;
		};
		public delegate bool RequestRoomLeaveDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int roomNumber);  
		public RequestRoomLeaveDelegate RequestRoomLeave = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int roomNumber)
		{ 
			return false;
		};
		public delegate bool NotifyRoomLeaveSuccessDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int roomNumber);  
		public NotifyRoomLeaveSuccessDelegate NotifyRoomLeaveSuccess = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int roomNumber)
		{ 
			return false;
		};
		public delegate bool NotifyRoomLeaveFailedDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String reason);  
		public NotifyRoomLeaveFailedDelegate NotifyRoomLeaveFailed = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String reason)
		{ 
			return false;
		};
	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
					
		switch(__rmiID)
		{
        case Common.RequestRoomCreate:
            ProcessReceivedMessage_RequestRoomCreate(__msg, pa, hostTag, remote);
            break;
        case Common.NotifyRoomCreateSuccess:
            ProcessReceivedMessage_NotifyRoomCreateSuccess(__msg, pa, hostTag, remote);
            break;
        case Common.NotifyRoomCreateFailed:
            ProcessReceivedMessage_NotifyRoomCreateFailed(__msg, pa, hostTag, remote);
            break;
        case Common.RequestRoomList:
            ProcessReceivedMessage_RequestRoomList(__msg, pa, hostTag, remote);
            break;
        case Common.ResponseRoomList:
            ProcessReceivedMessage_ResponseRoomList(__msg, pa, hostTag, remote);
            break;
        case Common.RequestRoomUserList:
            ProcessReceivedMessage_RequestRoomUserList(__msg, pa, hostTag, remote);
            break;
        case Common.ResponseRoomUserList:
            ProcessReceivedMessage_ResponseRoomUserList(__msg, pa, hostTag, remote);
            break;
        case Common.RequestRoomJoin:
            ProcessReceivedMessage_RequestRoomJoin(__msg, pa, hostTag, remote);
            break;
        case Common.NotifyRoomJoinSuccess:
            ProcessReceivedMessage_NotifyRoomJoinSuccess(__msg, pa, hostTag, remote);
            break;
        case Common.NotifyRoomJoinFailed:
            ProcessReceivedMessage_NotifyRoomJoinFailed(__msg, pa, hostTag, remote);
            break;
        case Common.RequestRoomLeave:
            ProcessReceivedMessage_RequestRoomLeave(__msg, pa, hostTag, remote);
            break;
        case Common.NotifyRoomLeaveSuccess:
            ProcessReceivedMessage_NotifyRoomLeaveSuccess(__msg, pa, hostTag, remote);
            break;
        case Common.NotifyRoomLeaveFailed:
            ProcessReceivedMessage_NotifyRoomLeaveFailed(__msg, pa, hostTag, remote);
            break;
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
    void ProcessReceivedMessage_RequestRoomCreate(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.String roomName; Yellotail.NettentionMarshaler.Read(__msg,out roomName);	
core.PostCheckReadMessage(__msg, RmiName_RequestRoomCreate);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=roomName.ToString()+",";
        NotifyCallFromStub(Common.RequestRoomCreate, RmiName_RequestRoomCreate,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestRoomCreate;
        summary.rmiName = RmiName_RequestRoomCreate;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestRoomCreate (remote,ctx , roomName );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestRoomCreate);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestRoomCreate;
        summary.rmiName = RmiName_RequestRoomCreate;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotifyRoomCreateSuccess(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int roomNumber; Yellotail.NettentionMarshaler.Read(__msg,out roomNumber);	
core.PostCheckReadMessage(__msg, RmiName_NotifyRoomCreateSuccess);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=roomNumber.ToString()+",";
        NotifyCallFromStub(Common.NotifyRoomCreateSuccess, RmiName_NotifyRoomCreateSuccess,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotifyRoomCreateSuccess;
        summary.rmiName = RmiName_NotifyRoomCreateSuccess;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotifyRoomCreateSuccess (remote,ctx , roomNumber );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotifyRoomCreateSuccess);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotifyRoomCreateSuccess;
        summary.rmiName = RmiName_NotifyRoomCreateSuccess;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotifyRoomCreateFailed(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.String reason; Yellotail.NettentionMarshaler.Read(__msg,out reason);	
core.PostCheckReadMessage(__msg, RmiName_NotifyRoomCreateFailed);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=reason.ToString()+",";
        NotifyCallFromStub(Common.NotifyRoomCreateFailed, RmiName_NotifyRoomCreateFailed,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotifyRoomCreateFailed;
        summary.rmiName = RmiName_NotifyRoomCreateFailed;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotifyRoomCreateFailed (remote,ctx , reason );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotifyRoomCreateFailed);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotifyRoomCreateFailed;
        summary.rmiName = RmiName_NotifyRoomCreateFailed;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RequestRoomList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_RequestRoomList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.RequestRoomList, RmiName_RequestRoomList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestRoomList;
        summary.rmiName = RmiName_RequestRoomList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestRoomList (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestRoomList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestRoomList;
        summary.rmiName = RmiName_RequestRoomList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ResponseRoomList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.Collections.Generic.List<Yellotail.Common.RoomInfo> roomList; Yellotail.NettentionMarshaler.Read(__msg,out roomList);	
core.PostCheckReadMessage(__msg, RmiName_ResponseRoomList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=roomList.ToString()+",";
        NotifyCallFromStub(Common.ResponseRoomList, RmiName_ResponseRoomList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ResponseRoomList;
        summary.rmiName = RmiName_ResponseRoomList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ResponseRoomList (remote,ctx , roomList );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ResponseRoomList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ResponseRoomList;
        summary.rmiName = RmiName_ResponseRoomList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RequestRoomUserList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int roomNumber; Yellotail.NettentionMarshaler.Read(__msg,out roomNumber);	
core.PostCheckReadMessage(__msg, RmiName_RequestRoomUserList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=roomNumber.ToString()+",";
        NotifyCallFromStub(Common.RequestRoomUserList, RmiName_RequestRoomUserList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestRoomUserList;
        summary.rmiName = RmiName_RequestRoomUserList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestRoomUserList (remote,ctx , roomNumber );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestRoomUserList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestRoomUserList;
        summary.rmiName = RmiName_RequestRoomUserList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ResponseRoomUserList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.Collections.Generic.List<Yellotail.Common.UserInfo> roomUserList; Yellotail.NettentionMarshaler.Read(__msg,out roomUserList);	
core.PostCheckReadMessage(__msg, RmiName_ResponseRoomUserList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=roomUserList.ToString()+",";
        NotifyCallFromStub(Common.ResponseRoomUserList, RmiName_ResponseRoomUserList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ResponseRoomUserList;
        summary.rmiName = RmiName_ResponseRoomUserList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ResponseRoomUserList (remote,ctx , roomUserList );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ResponseRoomUserList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ResponseRoomUserList;
        summary.rmiName = RmiName_ResponseRoomUserList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RequestRoomJoin(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int roomNumber; Yellotail.NettentionMarshaler.Read(__msg,out roomNumber);	
core.PostCheckReadMessage(__msg, RmiName_RequestRoomJoin);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=roomNumber.ToString()+",";
        NotifyCallFromStub(Common.RequestRoomJoin, RmiName_RequestRoomJoin,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestRoomJoin;
        summary.rmiName = RmiName_RequestRoomJoin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestRoomJoin (remote,ctx , roomNumber );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestRoomJoin);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestRoomJoin;
        summary.rmiName = RmiName_RequestRoomJoin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotifyRoomJoinSuccess(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int roomNumber; Yellotail.NettentionMarshaler.Read(__msg,out roomNumber);	
core.PostCheckReadMessage(__msg, RmiName_NotifyRoomJoinSuccess);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=roomNumber.ToString()+",";
        NotifyCallFromStub(Common.NotifyRoomJoinSuccess, RmiName_NotifyRoomJoinSuccess,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotifyRoomJoinSuccess;
        summary.rmiName = RmiName_NotifyRoomJoinSuccess;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotifyRoomJoinSuccess (remote,ctx , roomNumber );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotifyRoomJoinSuccess);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotifyRoomJoinSuccess;
        summary.rmiName = RmiName_NotifyRoomJoinSuccess;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotifyRoomJoinFailed(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.String reason; Yellotail.NettentionMarshaler.Read(__msg,out reason);	
core.PostCheckReadMessage(__msg, RmiName_NotifyRoomJoinFailed);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=reason.ToString()+",";
        NotifyCallFromStub(Common.NotifyRoomJoinFailed, RmiName_NotifyRoomJoinFailed,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotifyRoomJoinFailed;
        summary.rmiName = RmiName_NotifyRoomJoinFailed;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotifyRoomJoinFailed (remote,ctx , reason );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotifyRoomJoinFailed);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotifyRoomJoinFailed;
        summary.rmiName = RmiName_NotifyRoomJoinFailed;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RequestRoomLeave(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int roomNumber; Yellotail.NettentionMarshaler.Read(__msg,out roomNumber);	
core.PostCheckReadMessage(__msg, RmiName_RequestRoomLeave);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=roomNumber.ToString()+",";
        NotifyCallFromStub(Common.RequestRoomLeave, RmiName_RequestRoomLeave,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestRoomLeave;
        summary.rmiName = RmiName_RequestRoomLeave;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestRoomLeave (remote,ctx , roomNumber );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestRoomLeave);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestRoomLeave;
        summary.rmiName = RmiName_RequestRoomLeave;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotifyRoomLeaveSuccess(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int roomNumber; Yellotail.NettentionMarshaler.Read(__msg,out roomNumber);	
core.PostCheckReadMessage(__msg, RmiName_NotifyRoomLeaveSuccess);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=roomNumber.ToString()+",";
        NotifyCallFromStub(Common.NotifyRoomLeaveSuccess, RmiName_NotifyRoomLeaveSuccess,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotifyRoomLeaveSuccess;
        summary.rmiName = RmiName_NotifyRoomLeaveSuccess;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotifyRoomLeaveSuccess (remote,ctx , roomNumber );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotifyRoomLeaveSuccess);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotifyRoomLeaveSuccess;
        summary.rmiName = RmiName_NotifyRoomLeaveSuccess;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotifyRoomLeaveFailed(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.String reason; Yellotail.NettentionMarshaler.Read(__msg,out reason);	
core.PostCheckReadMessage(__msg, RmiName_NotifyRoomLeaveFailed);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=reason.ToString()+",";
        NotifyCallFromStub(Common.NotifyRoomLeaveFailed, RmiName_NotifyRoomLeaveFailed,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotifyRoomLeaveFailed;
        summary.rmiName = RmiName_NotifyRoomLeaveFailed;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotifyRoomLeaveFailed (remote,ctx , reason );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotifyRoomLeaveFailed);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotifyRoomLeaveFailed;
        summary.rmiName = RmiName_NotifyRoomLeaveFailed;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
		#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_RequestRoomCreate="RequestRoomCreate";
public const string RmiName_NotifyRoomCreateSuccess="NotifyRoomCreateSuccess";
public const string RmiName_NotifyRoomCreateFailed="NotifyRoomCreateFailed";
public const string RmiName_RequestRoomList="RequestRoomList";
public const string RmiName_ResponseRoomList="ResponseRoomList";
public const string RmiName_RequestRoomUserList="RequestRoomUserList";
public const string RmiName_ResponseRoomUserList="ResponseRoomUserList";
public const string RmiName_RequestRoomJoin="RequestRoomJoin";
public const string RmiName_NotifyRoomJoinSuccess="NotifyRoomJoinSuccess";
public const string RmiName_NotifyRoomJoinFailed="NotifyRoomJoinFailed";
public const string RmiName_RequestRoomLeave="RequestRoomLeave";
public const string RmiName_NotifyRoomLeaveSuccess="NotifyRoomLeaveSuccess";
public const string RmiName_NotifyRoomLeaveFailed="NotifyRoomLeaveFailed";
       
public const string RmiName_First = RmiName_RequestRoomCreate;
		#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_RequestRoomCreate="";
public const string RmiName_NotifyRoomCreateSuccess="";
public const string RmiName_NotifyRoomCreateFailed="";
public const string RmiName_RequestRoomList="";
public const string RmiName_ResponseRoomList="";
public const string RmiName_RequestRoomUserList="";
public const string RmiName_ResponseRoomUserList="";
public const string RmiName_RequestRoomJoin="";
public const string RmiName_NotifyRoomJoinSuccess="";
public const string RmiName_NotifyRoomJoinFailed="";
public const string RmiName_RequestRoomLeave="";
public const string RmiName_NotifyRoomLeaveSuccess="";
public const string RmiName_NotifyRoomLeaveFailed="";
       
public const string RmiName_First = "";
		#endif

		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}
namespace ChatProtocol
{
	internal class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

		public delegate bool P2PChatDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String userName, System.String message);  
		public P2PChatDelegate P2PChat = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String userName, System.String message)
		{ 
			return false;
		};
		public delegate bool SystemChatDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String message);  
		public SystemChatDelegate SystemChat = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String message)
		{ 
			return false;
		};
	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
					
		switch(__rmiID)
		{
        case Common.P2PChat:
            ProcessReceivedMessage_P2PChat(__msg, pa, hostTag, remote);
            break;
        case Common.SystemChat:
            ProcessReceivedMessage_SystemChat(__msg, pa, hostTag, remote);
            break;
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
    void ProcessReceivedMessage_P2PChat(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.String userName; Yellotail.NettentionMarshaler.Read(__msg,out userName);	
System.String message; Yellotail.NettentionMarshaler.Read(__msg,out message);	
core.PostCheckReadMessage(__msg, RmiName_P2PChat);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=userName.ToString()+",";
parameterString+=message.ToString()+",";
        NotifyCallFromStub(Common.P2PChat, RmiName_P2PChat,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.P2PChat;
        summary.rmiName = RmiName_P2PChat;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =P2PChat (remote,ctx , userName, message );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_P2PChat);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.P2PChat;
        summary.rmiName = RmiName_P2PChat;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_SystemChat(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.String message; Yellotail.NettentionMarshaler.Read(__msg,out message);	
core.PostCheckReadMessage(__msg, RmiName_SystemChat);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=message.ToString()+",";
        NotifyCallFromStub(Common.SystemChat, RmiName_SystemChat,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.SystemChat;
        summary.rmiName = RmiName_SystemChat;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =SystemChat (remote,ctx , message );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_SystemChat);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.SystemChat;
        summary.rmiName = RmiName_SystemChat;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
		#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_P2PChat="P2PChat";
public const string RmiName_SystemChat="SystemChat";
       
public const string RmiName_First = RmiName_P2PChat;
		#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_P2PChat="";
public const string RmiName_SystemChat="";
       
public const string RmiName_First = "";
		#endif

		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}
namespace ItemProtocol
{
	internal class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

		public delegate bool RequestItemAddDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int itemId);  
		public RequestItemAddDelegate RequestItemAdd = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int itemId)
		{ 
			return false;
		};
		public delegate bool NotifyItemAddSuccessDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int itemId);  
		public NotifyItemAddSuccessDelegate NotifyItemAddSuccess = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int itemId)
		{ 
			return false;
		};
		public delegate bool NotifyItemAddFailedDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String reason);  
		public NotifyItemAddFailedDelegate NotifyItemAddFailed = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String reason)
		{ 
			return false;
		};
		public delegate bool RequestItemListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public RequestItemListDelegate RequestItemList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool ResponseItemListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.Collections.Generic.List<Yellotail.Common.ItemInfo> itemList);  
		public ResponseItemListDelegate ResponseItemList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.Collections.Generic.List<Yellotail.Common.ItemInfo> itemList)
		{ 
			return false;
		};
	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
					
		switch(__rmiID)
		{
        case Common.RequestItemAdd:
            ProcessReceivedMessage_RequestItemAdd(__msg, pa, hostTag, remote);
            break;
        case Common.NotifyItemAddSuccess:
            ProcessReceivedMessage_NotifyItemAddSuccess(__msg, pa, hostTag, remote);
            break;
        case Common.NotifyItemAddFailed:
            ProcessReceivedMessage_NotifyItemAddFailed(__msg, pa, hostTag, remote);
            break;
        case Common.RequestItemList:
            ProcessReceivedMessage_RequestItemList(__msg, pa, hostTag, remote);
            break;
        case Common.ResponseItemList:
            ProcessReceivedMessage_ResponseItemList(__msg, pa, hostTag, remote);
            break;
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
    void ProcessReceivedMessage_RequestItemAdd(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int itemId; Yellotail.NettentionMarshaler.Read(__msg,out itemId);	
core.PostCheckReadMessage(__msg, RmiName_RequestItemAdd);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=itemId.ToString()+",";
        NotifyCallFromStub(Common.RequestItemAdd, RmiName_RequestItemAdd,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestItemAdd;
        summary.rmiName = RmiName_RequestItemAdd;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestItemAdd (remote,ctx , itemId );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestItemAdd);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestItemAdd;
        summary.rmiName = RmiName_RequestItemAdd;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotifyItemAddSuccess(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int itemId; Yellotail.NettentionMarshaler.Read(__msg,out itemId);	
core.PostCheckReadMessage(__msg, RmiName_NotifyItemAddSuccess);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=itemId.ToString()+",";
        NotifyCallFromStub(Common.NotifyItemAddSuccess, RmiName_NotifyItemAddSuccess,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotifyItemAddSuccess;
        summary.rmiName = RmiName_NotifyItemAddSuccess;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotifyItemAddSuccess (remote,ctx , itemId );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotifyItemAddSuccess);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotifyItemAddSuccess;
        summary.rmiName = RmiName_NotifyItemAddSuccess;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotifyItemAddFailed(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.String reason; Yellotail.NettentionMarshaler.Read(__msg,out reason);	
core.PostCheckReadMessage(__msg, RmiName_NotifyItemAddFailed);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=reason.ToString()+",";
        NotifyCallFromStub(Common.NotifyItemAddFailed, RmiName_NotifyItemAddFailed,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotifyItemAddFailed;
        summary.rmiName = RmiName_NotifyItemAddFailed;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotifyItemAddFailed (remote,ctx , reason );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotifyItemAddFailed);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotifyItemAddFailed;
        summary.rmiName = RmiName_NotifyItemAddFailed;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RequestItemList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_RequestItemList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.RequestItemList, RmiName_RequestItemList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestItemList;
        summary.rmiName = RmiName_RequestItemList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestItemList (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestItemList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestItemList;
        summary.rmiName = RmiName_RequestItemList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ResponseItemList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.Collections.Generic.List<Yellotail.Common.ItemInfo> itemList; Yellotail.NettentionMarshaler.Read(__msg,out itemList);	
core.PostCheckReadMessage(__msg, RmiName_ResponseItemList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=itemList.ToString()+",";
        NotifyCallFromStub(Common.ResponseItemList, RmiName_ResponseItemList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ResponseItemList;
        summary.rmiName = RmiName_ResponseItemList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ResponseItemList (remote,ctx , itemList );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ResponseItemList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ResponseItemList;
        summary.rmiName = RmiName_ResponseItemList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
		#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_RequestItemAdd="RequestItemAdd";
public const string RmiName_NotifyItemAddSuccess="NotifyItemAddSuccess";
public const string RmiName_NotifyItemAddFailed="NotifyItemAddFailed";
public const string RmiName_RequestItemList="RequestItemList";
public const string RmiName_ResponseItemList="ResponseItemList";
       
public const string RmiName_First = RmiName_RequestItemAdd;
		#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_RequestItemAdd="";
public const string RmiName_NotifyItemAddSuccess="";
public const string RmiName_NotifyItemAddFailed="";
public const string RmiName_RequestItemList="";
public const string RmiName_ResponseItemList="";
       
public const string RmiName_First = "";
		#endif

		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}

