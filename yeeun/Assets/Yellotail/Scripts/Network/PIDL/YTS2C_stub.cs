




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

using System;
using System.Net;	     

namespace YTS2C
{
	internal class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

		public delegate bool ResponseSignUpDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int result);  
		public ResponseSignUpDelegate ResponseSignUp = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int result)
		{ 
			return false;
		};
		public delegate bool ResponseSignInDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int result);  
		public ResponseSignInDelegate ResponseSignIn = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int result)
		{ 
			return false;
		};
		public delegate bool ResponseNicknameUsableDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int result);  
		public ResponseNicknameUsableDelegate ResponseNicknameUsable = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int result)
		{ 
			return false;
		};
		public delegate bool ResponseRoomCreateDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int result);  
		public ResponseRoomCreateDelegate ResponseRoomCreate = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int result)
		{ 
			return false;
		};
		public delegate bool ResponseRoomJoinDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int result);  
		public ResponseRoomJoinDelegate ResponseRoomJoin = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int result)
		{ 
			return false;
		};
		public delegate bool ResponseRoomLeaveDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int result);  
		public ResponseRoomLeaveDelegate ResponseRoomLeave = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int result)
		{ 
			return false;
		};
		public delegate bool ResponseRoomListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.Collections.Generic.List<Yellotail.Common.RoomInfo> roomList);  
		public ResponseRoomListDelegate ResponseRoomList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.Collections.Generic.List<Yellotail.Common.RoomInfo> roomList)
		{ 
			return false;
		};
		public delegate bool SystemChatDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String message);  
		public SystemChatDelegate SystemChat = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String message)
		{ 
			return false;
		};
	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
					
		switch(__rmiID)
		{
        case Common.ResponseSignUp:
            ProcessReceivedMessage_ResponseSignUp(__msg, pa, hostTag, remote);
            break;
        case Common.ResponseSignIn:
            ProcessReceivedMessage_ResponseSignIn(__msg, pa, hostTag, remote);
            break;
        case Common.ResponseNicknameUsable:
            ProcessReceivedMessage_ResponseNicknameUsable(__msg, pa, hostTag, remote);
            break;
        case Common.ResponseRoomCreate:
            ProcessReceivedMessage_ResponseRoomCreate(__msg, pa, hostTag, remote);
            break;
        case Common.ResponseRoomJoin:
            ProcessReceivedMessage_ResponseRoomJoin(__msg, pa, hostTag, remote);
            break;
        case Common.ResponseRoomLeave:
            ProcessReceivedMessage_ResponseRoomLeave(__msg, pa, hostTag, remote);
            break;
        case Common.ResponseRoomList:
            ProcessReceivedMessage_ResponseRoomList(__msg, pa, hostTag, remote);
            break;
        case Common.SystemChat:
            ProcessReceivedMessage_SystemChat(__msg, pa, hostTag, remote);
            break;
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
    void ProcessReceivedMessage_ResponseSignUp(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int result; Yellotail.NettentionMarshaler.Read(__msg,out result);	
core.PostCheckReadMessage(__msg, RmiName_ResponseSignUp);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=result.ToString()+",";
        NotifyCallFromStub(Common.ResponseSignUp, RmiName_ResponseSignUp,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ResponseSignUp;
        summary.rmiName = RmiName_ResponseSignUp;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ResponseSignUp (remote,ctx , result );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ResponseSignUp);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ResponseSignUp;
        summary.rmiName = RmiName_ResponseSignUp;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ResponseSignIn(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int result; Yellotail.NettentionMarshaler.Read(__msg,out result);	
core.PostCheckReadMessage(__msg, RmiName_ResponseSignIn);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=result.ToString()+",";
        NotifyCallFromStub(Common.ResponseSignIn, RmiName_ResponseSignIn,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ResponseSignIn;
        summary.rmiName = RmiName_ResponseSignIn;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ResponseSignIn (remote,ctx , result );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ResponseSignIn);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ResponseSignIn;
        summary.rmiName = RmiName_ResponseSignIn;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ResponseNicknameUsable(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int result; Yellotail.NettentionMarshaler.Read(__msg,out result);	
core.PostCheckReadMessage(__msg, RmiName_ResponseNicknameUsable);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=result.ToString()+",";
        NotifyCallFromStub(Common.ResponseNicknameUsable, RmiName_ResponseNicknameUsable,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ResponseNicknameUsable;
        summary.rmiName = RmiName_ResponseNicknameUsable;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ResponseNicknameUsable (remote,ctx , result );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ResponseNicknameUsable);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ResponseNicknameUsable;
        summary.rmiName = RmiName_ResponseNicknameUsable;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ResponseRoomCreate(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int result; Yellotail.NettentionMarshaler.Read(__msg,out result);	
core.PostCheckReadMessage(__msg, RmiName_ResponseRoomCreate);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=result.ToString()+",";
        NotifyCallFromStub(Common.ResponseRoomCreate, RmiName_ResponseRoomCreate,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ResponseRoomCreate;
        summary.rmiName = RmiName_ResponseRoomCreate;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ResponseRoomCreate (remote,ctx , result );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ResponseRoomCreate);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ResponseRoomCreate;
        summary.rmiName = RmiName_ResponseRoomCreate;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ResponseRoomJoin(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int result; Yellotail.NettentionMarshaler.Read(__msg,out result);	
core.PostCheckReadMessage(__msg, RmiName_ResponseRoomJoin);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=result.ToString()+",";
        NotifyCallFromStub(Common.ResponseRoomJoin, RmiName_ResponseRoomJoin,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ResponseRoomJoin;
        summary.rmiName = RmiName_ResponseRoomJoin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ResponseRoomJoin (remote,ctx , result );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ResponseRoomJoin);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ResponseRoomJoin;
        summary.rmiName = RmiName_ResponseRoomJoin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ResponseRoomLeave(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int result; Yellotail.NettentionMarshaler.Read(__msg,out result);	
core.PostCheckReadMessage(__msg, RmiName_ResponseRoomLeave);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=result.ToString()+",";
        NotifyCallFromStub(Common.ResponseRoomLeave, RmiName_ResponseRoomLeave,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ResponseRoomLeave;
        summary.rmiName = RmiName_ResponseRoomLeave;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ResponseRoomLeave (remote,ctx , result );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ResponseRoomLeave);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ResponseRoomLeave;
        summary.rmiName = RmiName_ResponseRoomLeave;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ResponseRoomList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.Collections.Generic.List<Yellotail.Common.RoomInfo> roomList; Yellotail.NettentionMarshaler.Read(__msg,out roomList);	
core.PostCheckReadMessage(__msg, RmiName_ResponseRoomList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=roomList.ToString()+",";
        NotifyCallFromStub(Common.ResponseRoomList, RmiName_ResponseRoomList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ResponseRoomList;
        summary.rmiName = RmiName_ResponseRoomList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ResponseRoomList (remote,ctx , roomList );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ResponseRoomList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ResponseRoomList;
        summary.rmiName = RmiName_ResponseRoomList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_SystemChat(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.String message; Yellotail.NettentionMarshaler.Read(__msg,out message);	
core.PostCheckReadMessage(__msg, RmiName_SystemChat);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=message.ToString()+",";
        NotifyCallFromStub(Common.SystemChat, RmiName_SystemChat,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.SystemChat;
        summary.rmiName = RmiName_SystemChat;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =SystemChat (remote,ctx , message );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_SystemChat);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.SystemChat;
        summary.rmiName = RmiName_SystemChat;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
		#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_ResponseSignUp="ResponseSignUp";
public const string RmiName_ResponseSignIn="ResponseSignIn";
public const string RmiName_ResponseNicknameUsable="ResponseNicknameUsable";
public const string RmiName_ResponseRoomCreate="ResponseRoomCreate";
public const string RmiName_ResponseRoomJoin="ResponseRoomJoin";
public const string RmiName_ResponseRoomLeave="ResponseRoomLeave";
public const string RmiName_ResponseRoomList="ResponseRoomList";
public const string RmiName_SystemChat="SystemChat";
       
public const string RmiName_First = RmiName_ResponseSignUp;
		#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_ResponseSignUp="";
public const string RmiName_ResponseSignIn="";
public const string RmiName_ResponseNicknameUsable="";
public const string RmiName_ResponseRoomCreate="";
public const string RmiName_ResponseRoomJoin="";
public const string RmiName_ResponseRoomLeave="";
public const string RmiName_ResponseRoomList="";
public const string RmiName_SystemChat="";
       
public const string RmiName_First = "";
		#endif

		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}

